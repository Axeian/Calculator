{"version":3,"sources":["App.js","components/Screen.js","components/Button.js","components/Touchpad.js","index.js"],"names":["App","state","expression","result","lastSymbolIsOperator","decimalInOperand","equalWasPressed","addToExpression","symbol","lastSymbol","charAt","length","operators","Set","numbs","has","setState","setTimeout","slice","exp","expLastSymbol","res","eval","className","style","calciStyle","this","Component","width","padding","border","Screen","screenStyle","expressionStyle","props","resultStyle","backgroundColor","color","height","fontFamily","textAlign","fontSize","minHeight","overflowWrap","wordWrap","Button","getColor","getStyle","borderRadius","id","onClick","bind","Touchpad","rowsArray","Object","values","row1","row2","row3","row4","row5","rowKey","map","row","key","rowStyle","btn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b695666a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Screen from './components/Screen'\nimport Touchpad from './components/Touchpad'\n\n\nexport class App extends Component {\n\n  state = {\n    expression: ' ',\n    result: '0',\n    lastSymbolIsOperator: false,\n    decimalInOperand: false,\n    equalWasPressed: false\n}\n\naddToExpression = (symbol) => {\n    \n    const {expression, result, lastSymbolIsOperator, decimalInOperand, equalWasPressed} = this.state\n\n    let lastSymbol = expression.charAt(expression.length - 1) \n    let operators = new Set(['/', '*', '+', '-'])\n    let numbs = new Set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n\n    // If a number is inputted after max digit limit has been reached\n    if(result.length === 21 && numbs.has(symbol))\n    {\n      this.setState({\n          result: 'DIGIT LIMIT REACHED!'\n        })\n\n      setTimeout(() => {\n        this.setState({\n          result\n        })\n      }, 1000)\n\n      return\n    }\n\n    // If a button is clicked while this alert is still visible\n    if(result === 'DIGIT LIMIT REACHED!')\n      return\n\n    // If 'AC' was clicked\n    if(symbol === 'AC')\n    {\n        this.setState({\n          expression: ' ',\n          result: '0',\n          lastSymbolIsOperator: false,\n          decimalInOperand: false,\n          equalWasPressed: false\n        })\n\n        return\n    }\n\n    // If '=' was clicked\n    if(symbol === '=')\n    {\n        // Return if '=' is clicked consecutively\n        if(equalWasPressed)\n          return\n\n        // Getting rid of any symbols at the end of the expression\n        let exp = expression\n        while(operators.has(lastSymbol))\n        {\n            exp = exp.slice(0, exp.length - 1)\n            lastSymbol = exp.charAt(exp.length - 1) \n        }\n\n        // Evealuating the expression\n        try{\n            let res = eval(exp)\n            if(typeof(res) === 'undefined')\n            {\n                if(result === '0')\n                    return\n                else\n                    throw 'invalid exp'\n            }\n          \n            this.setState({\n              result: res,\n              expression: exp + '=' + res,\n              lastSymbolIsOperator: false,\n              decimalInOperand: false,\n              equalWasPressed: true\n            })\n        }\n\n        catch{\n            this.setState({\n              result: 'INVALID EXPRESSION!'\n            })\n            setTimeout(() => {\n              this.setState({\n                expression: ' ',\n                result: '0'\n              })\n              \n            }, 1000);\n        }\n       \n        return\n    }\n\n    // If second to last button pressed was '='\n    if(equalWasPressed)\n    {\n        if(operators.has(symbol))\n        {\n            this.setState({\n              expression: result + symbol,\n              result: symbol,\n              lastSymbolIsOperator: true,\n              decimalInOperand: false,\n              equalWasPressed: false\n            })\n        }\n\n        else if(numbs.has(symbol))\n        {\n            this.setState({\n              expression: symbol,\n              result: symbol,\n              lastSymbolIsOperator: false,\n              decimalInOperand: false,\n              equalWasPressed: false\n            })\n        }\n\n        else\n        {\n          this.setState({\n            expression: '0.',\n            result: '0.',\n            lastSymbolIsOperator: false,\n            decimalInOperand: true,\n            equalWasPressed: false\n          })\n        }\n\n        return\n\n    }\n\n    // If a number is clicked upon\n    if(numbs.has(symbol))\n    {\n        if(result === '0')\n        {\n          this.setState({\n            expression: expression.slice(0, expression.length-1) + symbol,\n            result: symbol,\n            lastSymbolIsOperator: false\n          })\n        }\n\n        else\n        {\n          this.setState({\n            expression: expression + symbol,\n            result: lastSymbolIsOperator ? symbol : result + symbol,\n            lastSymbolIsOperator: false\n          })\n        }        \n    }\n\n    // If an operator is clicked upon\n    else if(operators.has(symbol))\n    {\n          // If last button clicked was also an operator\n          if(operators.has(lastSymbol))\n          {\n                if(symbol === lastSymbol)\n                  return\n\n                // This allows for second operand to be negative\n                else if(symbol === '-' && lastSymbol !== '-')\n                {\n                  this.setState({\n                    expression: expression + '-',\n                    result: symbol\n                  })\n                }\n\n                else\n                {\n                    let exp = expression\n                    let expLastSymbol = lastSymbol\n                    while(operators.has(expLastSymbol))\n                    {\n                        exp = exp.slice(0, exp.length - 1)\n                        expLastSymbol = exp.charAt(exp.length - 1) \n                    }\n\n                    this.setState({\n                      expression:  exp + symbol,\n                      result: symbol\n                    })\n                }\n              \n          }\n\n          // If last symbol was not an operator\n          else\n          {\n              this.setState({\n                expression: expression + symbol,\n                result: symbol,\n                lastSymbolIsOperator: true,\n                decimalInOperand: false\n              })\n          }\n\n    }\n\n    // If the decimal symbol was clicked upon\n    else\n    {\n          if(!decimalInOperand)\n          {\n              this.setState({\n                expression: operators.has(lastSymbol) || lastSymbol === ' ' ? expression + '0.' : expression + '.',\n                result: operators.has(lastSymbol) ? '0.' : result + '.',\n                lastSymbolIsOperator: false,\n                decimalInOperand: true\n              })\n          }\n    }\n\n\n  }\n\n  render() {\n      return (\n          <div className='body vh-100 d-flex align-items-center'>\n                 \n              <div className='container jumbotron' style={calciStyle}>\n\n                    <Screen \n                        expression={this.state.expression}\n                        result={this.state.result}\n                    />\n\n                    <div className='container'>\n                          <Touchpad\n                              addToExpression={this.addToExpression}\n                              expression={this.state.expression}\n                              result={this.state.result}\n                          />\n                    </div>\n             \n              </div>\n            \n          </div>\n      )\n  }\n}\n\nconst calciStyle = {\n    width: 'auto',\n    padding: '0',\n    border: '4px solid',\n}\n\nexport default App\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Screen extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            \r\n            <div className='container' style= {screenStyle}>\r\n\r\n                <div style={expressionStyle}>\r\n                    {this.props.expression}\r\n                </div>\r\n\r\n                <div style={resultStyle}>\r\n                    {this.props.result}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst screenStyle = {\r\n    backgroundColor: 'black',\r\n    color: 'white',\r\n    height: 'auto',\r\n    width: '350px',\r\n    fontFamily: 'calcifont',\r\n    textAlign: 'right'\r\n  }\r\n\r\nconst expressionStyle = {\r\n    fontSize: '1.2em',\r\n    color: 'orange',\r\n    minHeight: '1.5em',\r\n    overflowWrap: 'break-word',\r\n    wordWrap: 'break-word'\r\n}\r\n\r\nconst resultStyle = {\r\n    fontSize: '2em'\r\n}\r\n\r\nScreen.propTypes = {\r\n    expression: PropTypes.string.isRequired,\r\n    result: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Screen\r\n","import React, { Component } from 'react'\r\nimport {Button as Btn} from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Button extends Component {\r\n    \r\n\r\n    getColor = symbol => {\r\n\r\n        let numbs = new Set(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\r\n\r\n        if(symbol === 'AC')\r\n            return 'red'\r\n        else if(symbol === '=')\r\n            return 'blue'\r\n        else if(numbs.has(symbol) || symbol === '.')\r\n            return '#696969'\r\n        else\r\n            return 'grey'            \r\n\r\n    }\r\n\r\n    getStyle = symbol => {\r\n\r\n        return ({\r\n            fontSize: '2em',\r\n            height: symbol === \"=\" ? '4em' : '2em',\r\n            borderRadius: '0',\r\n            border: '1px solid',\r\n            backgroundColor: `${this.getColor(symbol)}`,\r\n            fontFamily: 'calcifont',\r\n            \r\n        })\r\n    }\r\n    \r\n    render() {\r\n\r\n        const {symbol} = this.props\r\n        \r\n        return (\r\n                <Btn \r\n                    id={symbol}\r\n                    onClick={this.props.addToExpression.bind(this,symbol)}\r\n\r\n                    className=\r\n                        {`${symbol ==='AC' || symbol === '0' ? 'col-6' : 'col-3'} btn btn-dark`}\r\n                    style={this.getStyle(symbol)}\r\n                >{symbol}\r\n                </Btn>\r\n        )\r\n    }\r\n}\r\n\r\nButton.propTypes = {\r\n    addToExpression: PropTypes.func.isRequired,\r\n    symbol: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Button\r\n","import React, { Component } from 'react'\r\nimport Button from './Button'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Touchpad extends Component {\r\n\r\n    render() {\r\n\r\n        const rows =\r\n        {\r\n            row1 : ['AC', '/', '*'],\r\n            row2 : ['7', '8', '9', '-'],\r\n            row3 : ['4', '5', '6', '+'],\r\n            row4 : ['1', '2', '3', '='],\r\n            row5 : ['0', '.']\r\n        }\r\n        \r\n        let rowsArray = Object.values(rows)\r\n        let rowKey = 0\r\n\r\n        return (\r\n\r\n                rowsArray.map(row => (\r\n\r\n                    <div className='row' key={`row${++rowKey}`}\r\n                         style= {rowStyle}>\r\n\r\n                        {row.map(btn => (\r\n\r\n                            <Button\r\n                             key={btn} \r\n                             addToExpression={this.props.addToExpression} \r\n                             symbol={btn}\r\n                             />\r\n                             \r\n                        ))}\r\n\r\n                    </div>\r\n\r\n                ))        \r\n         )\r\n    }\r\n}\r\n\r\nconst rowStyle = {\r\n    height: '4em'\r\n}\r\n\r\nTouchpad.propTypes = {\r\n    addToExpression: PropTypes.func.isRequired,\r\n    expression: PropTypes.string.isRequired,\r\n    result: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Touchpad","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}